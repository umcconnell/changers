var searchIndex = JSON.parse('{\
"changers":{"doc":"Change.rsMake Change. In Rust.","i":[[0,"cli","changers","Command Line Interface",null,null],[3,"Config","changers::cli","User configurations from the CLI",null,null],[12,"amount","","",0,null],[12,"coins_file","","",0,null],[4,"CliError","","Custom error type for CLI errors",null,null],[13,"Io","","",1,null],[13,"Args","","",1,null],[13,"File","","",1,null],[0,"config","","",null,null],[3,"Config","changers::cli::config","User configurations from the CLI",null,null],[12,"amount","","",0,null],[12,"coins_file","","",0,null],[11,"new","changers::cli","Create a new user configuration by reading command line…",0,[[["args",3]],[["clierror",4],["config",3],["result",4]]]],[11,"get_coins","","Reads in coins from the user-specified coin file or…",0,[[],[["result",4],["clierror",4],["vec",3]]]],[0,"err","","",null,null],[4,"CliError","changers::cli::err","Custom error type for CLI errors",null,null],[13,"Io","","",1,null],[13,"Args","","",1,null],[13,"File","","",1,null],[0,"logic","changers","Change-making logic",null,null],[4,"LogicError","changers::logic","Custom error type for logic errors",null,null],[13,"Unreachable","","",2,null],[5,"make_change","","Make change",null,[[["vec",3]],[["logicerror",4],["hashmap",3],["result",4]]]],[0,"change","","",null,null],[5,"change_making_matrix","changers::logic::change","Generate a change matrix for dynamic programming",null,[[],[["vec",3],["vec",3]]]],[5,"amount_coins","","Fill a change matrix for a desired amount using dynmaic…",null,[[],[["vec",3],["vec",3]]]],[5,"make_change","","Make change",null,[[["vec",3]],[["logicerror",4],["hashmap",3],["result",4]]]],[6,"ChangeMatrix","","",null,null],[0,"coins","changers::logic","",null,null],[5,"longest_coin","changers::logic::coins","Find the longest coin with the most decimal places in a…",null,[[]]],[5,"normalize_coins","","Normalize a vector of coins by multiplying every coin with…",null,[[],["vec",3]]],[5,"normalize","","Normalize a vector of coins",null,[[],[["result",4],["logicerror",4]]]],[0,"decimals","changers::logic","",null,null],[5,"round","changers::logic::decimals","Round a floating-point number to a specified precision",null,[[]]],[5,"precision","","Calculate the precision of a floating-point number",null,[[],["option",4]]],[0,"err","changers::logic","",null,null],[4,"LogicError","changers::logic::err","Custom error type for logic errors",null,null],[13,"Unreachable","","",2,null],[11,"from","changers::cli","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","changers::logic","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","changers::cli","",1,[[["error",3]],["clierror",4]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","changers::logic","",2,[[["formatter",3]],["result",6]]],[11,"fmt","changers::cli","",1,[[["formatter",3]],["result",6]]],[11,"fmt","changers::logic","",2,[[["formatter",3]],["result",6]]]],"p":[[3,"Config"],[4,"CliError"],[4,"LogicError"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);